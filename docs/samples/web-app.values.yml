releasePrefix: "-"

# --set "envs.BAR=foo,envs.TEST=true"
envs:
  BAR: foo
  TEST: "true"

# --set "envsString=$ENVS_STRING"
envsString: |
  BAR2: foo2
  TEST2: "false"

# --set "secretEnvs.FOO=bar"
secretEnvs:
  FOO: bar

# --set "secretEnvsString=$SECRET_ENVS_STRING"
secretEnvsString: |
  FOO2: BAR2
  PASS: someP@s5

imagePullSecrets:
  registry.org: |
    {"auths":{"registry.org":{"auth":"cnd1c2VyOnNlY3VyZVBANXM="}}}
  registry.org-rw: b64:eyJhdXRocyI6eyJyZWdpc3RyeS5vcmciOnsiYXV0aCI6ImNuZDFjMlZ5T25ObFkzVnlaVkJBTlhNPSJ9fX0=

# --set "generic.extraImagePullSecrets[0].name=$EXISTING_IMAGE_PULL_SECRET_NAME_ADD"
generic:
  extraImagePullSecrets:
  - name: existing-registry-secret

defaultImage: registry.org/my-app
defaultImageTag: latest

ingresses:
  web.app.ru:
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "128m"
    certManager:
      issuerType: cluster-issuer
      issuerName: letsencrypt
    hosts:
    - paths:
      - serviceName: nginx
        servicePort: 8080

services:
  nginx:
    type: "NodePort"
    ports:
    - name: api
      protocol: TCP
      port: 8080
      nodePort: 30036
    extraSelectorLabels:
      app: my-app


deploymentsGeneral:
  extraVolumes:
  - name: extra-app-vol2
    persistentVolumeClaim:
      claimName: extra-app-pvc2
  volumeMounts:
  - name: extra-app-vol2
    mountPath: /var/app/data

deployments:
  api:
    labels: {}
    podLabels: {}
    podAnnotations:
      checksum/api-key: '{{ include "helpers.workload.checksum" (index $.Values.secrets "secret-files") }}'
    replicas: 2
    extraSelectorLabels:
      app: my-app
    serviceAccountName: deployer
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: node-role
              operator: In
              values:
              - prod
    containers:
    - env:
      - name: MY_ENV
        value: "1234"
      envSecrets:
      - secret-envs
      envConfigmaps:
      - envs
      volumeMounts:
      - name: secret-files
        mountPath: /var/lib/secret
      - name: app-pvc
        mountPath: /var/www/html/files
      - name: main-nginx-config
        mountPath: /etc/nginx/nginx.conf
        subPath: nginx.conf
    volumes:
    - name: secret-files
      type: secret
    - name: app-pvc
      type: pvc
    - type: configMap
      name: main-nginx-config
      items:
      - key: nginx.conf
        path: nginx.conf

configMaps:
  main-nginx-config:
    data:
      nginx.conf: |
        worker_processes  1;
        load_module modules/ngx_http_js_module.so;
  
        events {
            worker_connections  1024;
        }

secrets:
  # --set "secrets.secret-files.data.api\.key=$SOME_ENV"
  secret-files:
    data:
      api.key: |-
        JFczZwReBkJFczZwReBkJFczZwReBkJFczZwReBk

# All PVSs will be added to `volumes` block in each workload excluding hooks
pvcs:
  app-data:
    accessModes:
    - ReadWriteOnce
    - ReadWriteMany
    size: 1Gi


serviceAccount:
  deployer: {}

#servicemonitors:
#- endpoints:
#  - interval: 30s
#    port: exporter
#    path: /metrics
#  extraSelectorLabels:
#    app: my-app
#  labels:
#    foo: foo

hooks:
  migration-up: 
    containers:
    - image: registry.app.ru/app-migration
      nodeSelector:
        kind: infrastructure-apps
      args:
      - migrate
      - up
      envFrom:
      - secretRef:
          name: server-env